{"version":3,"sources":["componets/Editor.jsx","App.js","reportWebVitals.js","index.js"],"names":["Editor","props","handleChange","bind","state","value","e","this","setState","target","className","onChange","defaultValue","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRA0CeA,E,kDAvCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,aAAe,EAAKA,aAAaC,KAAlB,gBAEpB,EAAKC,MAAQ,CACXC,MAAO,IANQ,E,gDAYnB,SAAaC,GACXC,KAAKC,SAAS,CAAEH,MAAOC,EAAEG,OAAOJ,U,oBAIlC,WACE,OACE,mCACE,sBAAKK,UAAU,YAAf,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAIA,UAAU,cAAd,mBACA,0BACEA,UAAU,aACVC,SAAUJ,KAAKL,aACfU,aAAcL,KAAKH,MAAMC,WAG7B,sBAAKK,UAAU,SAAf,UACE,oBAAIA,UAAU,eAAd,sBACA,qBAAKA,UAAU,cAAf,SAA8BH,KAAKH,MAAMC,oB,GAhChCQ,IAAMC,WCUZC,MARf,WACE,OACE,qBAAKL,UAAU,MAAf,SACE,cAAC,EAAD,OCKSM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.94d95a6d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Editor.css\";\nclass Editor extends React.Component {\n  constructor(props) {\n    super(props);\n    // to bind the method with event handler without ().\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      value: \"\",\n    };\n  }\n\n  //event handler method to change the state.\n  //setState is used to change the state\n  handleChange(e) {\n    this.setState({ value: e.target.value });\n  }\n\n  //call the handleChanges method in the onChange event and set the default value as empty\n  render() {\n    return (\n      <>\n        <div className=\"container\">\n          <div className=\"input\">\n            <h3 className=\"left-header\">Input</h3>\n            <textarea\n              className=\"input-text\"\n              onChange={this.handleChange}\n              defaultValue={this.state.value}\n            />\n          </div>\n          <div className=\"output\">\n            <h3 className=\"right-header\">Pro Note</h3>\n            <div className=\"output-text\">{this.state.value}</div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Editor;\n","import React from 'react';\nimport './App.css';\nimport Editor from './componets/Editor';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Editor />\n  </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}